{"version":3,"sources":["logo.svg","Components/NavigationBar/NavigationBar.js","Components/Artists/Addartist.js","Components/Artists/artist.component.js","Components/Songs/song.component.js","Components/Songs/AddSongs.js","Components/Routes/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","grow","flexGrow","title","marginLeft","display","breakpoints","up","sectionDesktop","sectionMobile","PrimarySearchAppBar","classes","React","useState","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","Boolean","isMobileMenuOpen","handleMobileMenuClose","renderMenu","Menu","anchorOrigin","vertical","horizontal","id","keepMounted","transformOrigin","open","onClose","renderMobileMenu","className","AppBar","position","Toolbar","Typography","variant","noWrap","Component","Song","props","this","song","name","dob","rate","OtherPage1","state","songs","fetchData","bind","songList","axios","get","then","response","console","log","setState","data","rows","catch","error","timer","setInterval","map","currentSong","i","key","style","width","marginRight","marginTop","Nav","Link","href","Button","type","color","changeRating","newRating","post","newrating","sid","errno","alert","err","dor","artist","starDimension","starSpacing","rating","starRatedColor","numberOfStars","OtherPage","Songs","handleChange","date","onClick","history","push","onChangeSongName","onChangeRating","onSelect","onSubmit","artistname","options","csid","artistlist","message","todo_completed","e","target","value","selectedList","selectedItem","preventDefault","res","max","length","ssid","caid","songname","onChange","selected","dateFormat","selectedValues","selectedValue","onRemove","displayValue","withRouter","Homepage","Fragment","App","path","component","AddSongs","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34a34084.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nimport '../NavigationBar/NavigationBar.scss';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n\r\n  },\r\n//   menuButton: {\r\n//     marginRight: '20px'\r\n//   },\r\n  title: {\r\n    marginLeft:'573px',\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n \r\n  sectionDesktop: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'flex',\r\n    },\r\n  },\r\n  sectionMobile: {\r\n    display: 'flex',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n}));\r\n\r\n function PrimarySearchAppBar() {\r\n   const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\r\n\r\n  const isMenuOpen = Boolean(anchorEl);\r\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n\r\n  const handleProfileMenuOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMobileMenuClose = () => {\r\n    setMobileMoreAnchorEl(null);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n    handleMobileMenuClose();\r\n  };\r\n\r\n  const handleMobileMenuOpen = (event) => {\r\n    setMobileMoreAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const menuId = 'primary-search-account-menu';\r\n  const renderMenu = (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={menuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMenuOpen}\r\n      onClose={handleMenuClose}\r\n    >\r\n      {/* <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\r\n      <MenuItem onClick={handleMenuClose}>My account</MenuItem> */}\r\n    </Menu>\r\n  );\r\n\r\n  const mobileMenuId = 'primary-search-account-menu-mobile';\r\n  const renderMobileMenu = (\r\n    <Menu\r\n      anchorEl={mobileMoreAnchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={mobileMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMobileMenuOpen}\r\n      onClose={handleMobileMenuClose}\r\n    >\r\n        \r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n\r\n         \r\n        <Typography className={classes.title} variant=\"h5\" noWrap>\r\n        ART-SONG\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <div className={classes.sectionDesktop}>\r\n          \r\n          </div>\r\n          <div className={classes.sectionMobile}>\r\n         \r\n          \r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {renderMobileMenu}\r\n      {renderMenu}\r\n    </div>\r\n  );\r\n}\r\nexport default PrimarySearchAppBar;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n// import './styles.css';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nvar options = { year: 'numeric', month: 'numeric', day: 'numeric' };\r\n export default class CreateTodo123 extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onChangeArtistName = this.onChangeArtistName.bind(this);\r\n        // this.onChangeDateOfBirth = this.onChangeDateOfBirth.bind(this);\r\n        this.onChangeRating=this.onChangeRating.bind(this);\r\n        this.onChangeBio=this.onChangeBio.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n        this.state = {\r\n            name: '',\r\n            dob: '',\r\n            rate:'',\r\n            bio:'',\r\n            message:'',\r\n        }\r\n    }\r\n\r\n    onChangeArtistName(e) {\r\n        this.setState({\r\n            name: e.target.value\r\n        });\r\n    }\r\n\r\n    // onChangeDateOfBirth(e) {\r\n    //     this.setState({\r\n    //         dob: e.target.value\r\n    //     });\r\n    // }\r\n  onChangeRating(e) {\r\n    this.setState({\r\n        rate: e.target.value\r\n    });\r\n}\r\nonChangeBio(e) {\r\n    this.setState({\r\n            bio: e.target.value\r\n    });\r\n}\r\n\r\nhandleChange = date => {\r\n    this.setState({\r\n      dob: date\r\n        \r\n    });\r\n  };\r\n\r\n    \r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        if(!this.state.name)\r\n        {\r\n            this.setState({message:\"names cannot be null\"});\r\n        }\r\n        else if(!this.state.dob)\r\n        {\r\n            this.setState({message:\"Date of Birth cannot be null\"});\r\n        }\r\n        else if(!this.state.rate)\r\n        {\r\n            this.setState({message:\"Rate cannot be null\"});\r\n        }\r\n        else if(!this.state.bio)\r\n        {\r\n            this.setState({message:\"Bio cannot be null\"});\r\n        }\r\n        else\r\n        { \r\n            console.log(`Form submitted:`);\r\n        console.log(`Artist Name: ${this.state.name}`);\r\n        console.log(`Artist DOB: ${this.state.dob}`);\r\n        console.log(`Artist Rate: ${this.state.rate}`);\r\n        const artist = {\r\n            name: this.state.name,\r\n            dob: this.state.dob,\r\n            rate: this.state.rate,\r\n            bio:this.state.bio,\r\n            todo_completed: this.state.todo_completed\r\n        };\r\n        axios.post('http://localhost:4000/add', artist)\r\n            .then(res => console.log(res.data));\r\n        \r\n        this.setState({\r\n            name: '',\r\n            dob: '',\r\n            rate:'',\r\n            bio:'',\r\n            todo_completed: false\r\n        })}\r\n       \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{marginTop: \"41px\",marginLeft: \"429px\",\r\n              marginRight: \"513px\"}}>\r\n                <h2>Add a new artist </h2>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\"> \r\n                        <label>Artist: </label>\r\n                        <input  type=\"text\"\r\n                                className=\"form-control\"\r\n                                value={this.state.name}\r\n                                onChange={this.onChangeArtistName}\r\n                                />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Date of Birth: </label>\r\n                        <br/>\r\n                        <DatePicker\r\n                        className=\"dates\"\r\n                         selected={this.state.dob}\r\n                    \r\n                         onChange={this.handleChange}\r\n                         \r\n                />\r\n                       \r\n                       \r\n                        {/* <input \r\n                                type=\"text\" \r\n                                className=\"form-control\"\r\n                                value={this.state.dob}\r\n                                onChange={this.onChangeDateOfBirth}\r\n                                /> */}\r\n                    </div>\r\n                   \r\n                    <div className=\"form-group\">\r\n                        <label>Rating: </label>\r\n                        <input \r\n                                type=\"text\" \r\n                                className=\"form-control\"\r\n                                value={this.state.rate}\r\n                                onChange={this.onChangeRating}\r\n                                />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Bio: </label>\r\n                        <input \r\n                                type=\"text\" \r\n                                className=\"form-control\"\r\n                                value={this.state.bio}\r\n                                onChange={this.onChangeBio}\r\n                                />\r\n                    </div>\r\n                        <div>\r\n                            {\r\n                                this.state.message\r\n                            }\r\n                        </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"Done\" className=\"btn btn-primary\" />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Nav, Navbar, Form, FormControl,NavDropdown,Button } from 'react-bootstrap';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nclass Song extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        \r\n    }\r\n    render() {\r\n       \r\n        return(\r\n            <tr>\r\n                {/* <td>{this.props.song.sid}</td> */}\r\n                <td>{this.props.song.name}</td>\r\n                <td>{this.props.song.dob}</td>\r\n                <td>{this.props.song.song}</td>\r\n                <td>{this.props.song.rate}</td>\r\n                \r\n                \r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nclass OtherPage1 extends  Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {songs: []};\r\n\r\n        this.fetchData = this.fetchData.bind(this);\r\n        this.songList = this.songList.bind(this);\r\n    }\r\n\r\n\r\n    fetchData(){\r\n        axios.get('/artists')\r\n            .then(response => {\r\n                console.log(response);\r\n                \r\n                this.setState({ songs: response.data.rows });\r\n            })\r\n            .catch(function (error){\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        this.fetchData();\r\n        this.timer = setInterval(() => this.fetchData(), 250);\r\n    }\r\n        \r\n    songList() {\r\n\r\n        return this.state.songs.map(function(currentSong, i){\r\n            return (<Song song={currentSong} key={i} />);\r\n            })\r\n    }\r\n\r\n    render(){\r\n        const MyStyle = {\r\n            width: \"70%\", marginLeft: \"auto\", marginRight: \"auto\", marginTop: \"2%\"\r\n        }\r\n        return (\r\n            <div style={MyStyle}>\r\n                <h3>Top 10 Artists</h3>\r\n            \r\n         <span>\r\n         <Nav.Link  href=\"/artist/addartist\"> <Button className=\"btn btn-success\"  type=\"click\" >\r\n        <span className=\"zehnaseeb\"> <font color=\"white\">\r\n            Add Artists \r\n          </font></span>\r\n        </Button>\r\n        </Nav.Link>\r\n          {/* <Link to =\"\">  <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"Add Artist\" className=\"btn btn-primary\" />\r\n                    </div></Link> */}\r\n         </span>\r\n        \r\n\r\n      \r\n                <table className=\"table table-striped\" style={{ marginTop: 20 }} >\r\n                    <thead>\r\n                        <tr>\r\n                            {/* <th>Track Number</th> */}\r\n                            <th>Artist</th>\r\n                            <th>Date of Birth</th>\r\n                            <th>Songs</th>\r\n                            <th>Rating</th>\r\n                            \r\n                            \r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        { this.songList() }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default OtherPage1;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Nav, Navbar, Form, FormControl,NavDropdown,Button } from 'react-bootstrap';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport StarRatings from 'react-star-ratings';\r\n// import history from './History';\r\n\r\n\r\nclass Song extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n            this.changeRating=this.changeRating.bind(this);\r\n        \r\n    }\r\n    changeRating( newRating, name ) {\r\n        axios.post('/songs/rate',{ newrating: newRating,\r\n        sid:this.props.song.sid\r\n\r\n    }\r\n        )\r\n            .then(response =>{ console.log('rating response',response.data);\r\n            if(response.data.errno)\r\n            {\r\n                alert('Could not rate');\r\n            }\r\n            }).catch(function(err)\r\n            {\r\n                console.log(err);\r\n            }\r\n        \r\n            );\r\n      }\r\n   \r\n    render() {\r\n       \r\n        return(\r\n            <tr>\r\n                <td>{this.props.song.sid}</td>\r\n                <td>{this.props.song.song}</td>\r\n                <td>{this.props.song.dor}</td>\r\n                <td>{this.props.song.artist}</td>\r\n                <td> <StarRatings\r\n            starDimension=\"20px\"\r\n            starSpacing=\"5px\"\r\n          rating={this.props.song.rate}\r\n          starRatedColor=\"gold\"\r\n          changeRating={this.changeRating}\r\n          numberOfStars={5}\r\n          name='rating'\r\n        /></td>\r\n                \r\n                \r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nclass OtherPage extends  Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {songs: []};\r\n        \r\n        this.fetchData = this.fetchData.bind(this);\r\n        this.songList = this.songList.bind(this);\r\n    }\r\n\r\n\r\n    fetchData(){\r\n        axios.get('/songs')\r\n            .then(response => {\r\n                console.log(response);\r\n                \r\n                this.setState({ songs: response.data.rows });\r\n            })\r\n            .catch(function (error){\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        this.fetchData();\r\n        this.timer = setInterval(() => this.fetchData(), 250);\r\n    }\r\n        \r\n    songList() {\r\n\r\n        return this.state.songs.map(function(currentSong, i){\r\n            return (<Song song={currentSong} key={i} />);\r\n            })\r\n    }\r\n\r\n    render(){\r\n        const MyStyle = {\r\n            width: \"70%\", marginLeft: \"auto\", marginRight: \"auto\", marginTop: \"2%\"\r\n        }\r\n        return (\r\n           \r\n            <div style={MyStyle}>\r\n                <h3>Top 10 Songs</h3>\r\n                \r\n                <Nav.Link href=\"/addsongs\"> <Button className=\"btn btn-success\"  >\r\n         <font color=\"white\">\r\n            Add Songs \r\n          </font>\r\n        </Button>\r\n        </Nav.Link>\r\n\r\n      \r\n                <table className=\"table table-striped\" style={{ marginTop: 20 }} >\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Track Number</th>\r\n                            <th>Title</th>\r\n                            <th>Date of Release</th>\r\n                            <th>Artist</th>\r\n                            <th>Rating</th>\r\n                            \r\n                            \r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        { this.songList() }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default OtherPage;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport axios from 'axios';\r\n// import Homie from './Home';\r\nimport {Button} from \"react-bootstrap\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n// class Artists extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n\r\n        \r\n//     }\r\n//     render() {\r\n       \r\n//         return(\r\n//             <tr>\r\n//                 {/* <td>{this.props.song.sid}</td> */}\r\n//                 <td>{this.props.art.name}</td>\r\n                \r\n                \r\n//             </tr>\r\n//         );\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n  class Songs extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // this.state = {artists: []};\r\n        // this.artList = this.artList.bind(this);\r\n        // this.fetchData = this.fetchData.bind(this);\r\n        this.onChangeSongName = this.onChangeSongName.bind(this);\r\n        // this.onChangeSongDateofRelease = this.onChangeSongDateofRelease.bind(this);\r\n        // this.onChangeArtistName=this.onChangeArtistName.bind(this);\r\n        this.onChangeRating=this.onChangeRating.bind(this);\r\n        this.onSelect=this.onSelect.bind(this);\r\n        // this.onChangeTodoPriority = this.onChangeTodoPriority.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n      this.onClick= this.onClick.bind(this);\r\n        this.state = {\r\n            song: '',\r\n            dor: '',\r\n            artistname:'',\r\n            rate:0,\r\n            options:[],\r\n            csid:'',\r\n            artistlist:[],\r\n            message:'',\r\n            // todo_priority: '',\r\n            todo_completed: false\r\n        }\r\n        \r\n    } \r\n    \r\n    componentDidMount()\r\n    {\r\n        axios.get('/getartist')\r\n            .then(response => {\r\n                console.log(response);\r\n                \r\n                this.setState({ options: response.data.rows });\r\n                console.log(this.state.options);\r\n            })\r\n            .catch(function (error){\r\n                console.log(error);\r\n            });\r\n    }\r\n    \r\n    clear(){\r\n        this.setState({dor: null});\r\n      }\r\n        \r\n    // artList() {\r\n\r\n    //     return this.state.artists.map(function(currentName, i){\r\n    //         return (<Artists art={currentName} key={i} />);\r\n    //         })\r\n    // }\r\n\r\n\r\n    onChangeSongName(e) {\r\n        this.setState({\r\n            song: e.target.value\r\n        });\r\n    }\r\n\r\n    handleChange = date => {\r\n        this.setState({\r\n          dor: date\r\n        });\r\n      };\r\n    // onChangeSongDateofRelease(e) {\r\n    //     this.setState({\r\n    //         dor: e.target.value,\r\n    //         dor:date\r\n    //     });\r\n    // }\r\n    \r\n\t\r\n//     onChangeArtistName(e) {\r\n//       this.setState({\r\n//           artistname: e.target.value\r\n//       });\r\n//   }\r\n  onChangeRating(e) {\r\n    this.setState({\r\n        rate: e.target.value\r\n    });\r\n}\r\nonSelect(selectedList, selectedItem) {\r\n    this.setState(\r\n        {\r\n            artistlist:selectedList\r\n        }\r\n    )\r\n    \r\n   console.log(selectedList) ;\r\n}\r\n \r\n// onRemove(selectedList, removedItem) {\r\n//     console.log(selectedItem) ;\r\n// }\r\n\r\n    // onChangeTodoPriority(e) {\r\n    //     this.setState({\r\n    //         todo_priority: e.target.value\r\n    //     });\r\n    // }\r\nonClick=()=>{\r\n        this.history.push('/addsongs');\r\n}\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        console.log('Hello');\r\n        if(!this.state.song)\r\n        {\r\n            this.setState({message:\"names cannot be null\"});\r\n        }\r\n        else if(!this.state.dor)\r\n        {\r\n            this.setState({message:\"Date of Birth cannot be null\"});\r\n        }\r\n        else if(!this.state.rate)\r\n        {\r\n            this.setState({message:\"Rate cannot be null\"});\r\n        }\r\n        else\r\n        {\r\n        \r\n        console.log(`Form submitted:`);\r\n        console.log(`Song Name: ${this.state.song}`);\r\n        console.log(`Song Date of Release: ${this.state.dor}`);\r\n        console.log(`Artist Name: ${this.state.artistname}`);\r\n        console.log(`Rating: ${this.state.rate}`);\r\n        // console.log(`Todo Priority: ${this.state.todo_priority}`);\r\n        const songs = {\r\n            song: this.state.song,\r\n            dor: this.state.dor,\r\n            rate: this.state.rate,\r\n            todo_completed: this.state.todo_completed\r\n        };\r\n        axios.post('/add123',songs)\r\n            .then(res => console.log(res.data));\r\n        };\r\n            console.log(this.state.artistlist);\r\n        axios.get('/newsongsid')\r\n        .then(response => {\r\n            console.log(response);\r\n            \r\n            this.setState({ csid: response.data.rows[0].max+1});\r\n            console.log('first');\r\n            console.log(this.state.csid);\r\n            var i;\r\n            for(i=0;i<this.state.artistlist.length;i++)\r\n        {   \r\n            // console.log(this.state.csid);\r\n            axios.post('/addsongartist',{ssid:this.state.csid,caid:this.state.artistlist[i].id})\r\n            .then(res => console.log(res.data));\r\n        // this.setState({\r\n        //     song: '',\r\n        //     dor: '',\r\n        //     artistname:'',\r\n        //     rate:0,\r\n        //     // todo_priority: '',\r\n        //     todo_completed: false\r\n        // })\r\n    };\r\n        })\r\n        .catch(function (error){\r\n            console.log(error);\r\n        });\r\n        \r\n        \r\n    this.setState({\r\n        song: '',\r\n        dor: '',\r\n        artistname:'',\r\n        rate:0,\r\n        // todo_priority: '',\r\n        todo_completed: false\r\n    })\r\n    }\r\n    \r\n    \r\n    // componentDidMount()\r\n    // {\r\n    //     this.fetchData();\r\n    //     this.timer=setInterval(()=>this.fetchData(),250);\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{marginTop: \"41px\",marginLeft: \"429px\",\r\n              marginRight: \"513px\"}}>\r\n                <Button onClick={this.onClick}>Add a new song </Button>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\"> \r\n                        <label>Song Name: </label>\r\n                        <input  type=\"text\"\r\n                                className=\"form-control\"\r\n                                value={this.state.songname}\r\n                                onChange={this.onChangeSongName}\r\n                                />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Date of Release: </label>\r\n                        <br/>\r\n                        <DatePicker\r\n                        className=\"dates\"\r\n                         selected={this.state.dor}\r\n                    onChange={this.handleChange}\r\n                    dateFormat=\"yyyy-mm-dd\" />\r\n                    \r\n                        {/* <input\r\n                          type=\"text\" \r\n                                className=\"form-control\"\r\n                                onClick={this.clear}\r\n                                value={this.state.dor}\r\n                                onChange={this.onChangeSongDateofRelease}\r\n                                /> */}\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Artist: </label>\r\n                        <Multiselect\r\n                        options={ this.state.options } // Options to display in the dropdown\r\n                        selectedValues={this.state.selectedValue} // Preselected value to persist in dropdown\r\n                        onSelect={this.onSelect} // Function will trigger on select event\r\n                        onRemove={this.onRemove} // Function will trigger on remove event\r\n                        displayValue=\"name\"\r\n                                type=\"text\" \r\n                                className=\"form-control\"\r\n                                // value={this.state.artistname}\r\n                                // onChange={this.onChangeArtistName}\r\n                                />\r\n                            \r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Rating: </label>\r\n                        <input \r\n                                type=\"text\" \r\n                                className=\"form-control\"\r\n                                value={this.state.rate}\r\n                                onChange={this.onChangeRating}\r\n                                />\r\n                    </div>\r\n                    <div>\r\n                            {\r\n                                this.state.message\r\n                            }\r\n                        </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"Add Song\" className=\"btn btn-primary\" />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(Songs);","import React from 'react';\r\nimport PrimarySearchAppBar from '../NavigationBar/NavigationBar';\r\nimport CreateTodo123 from '../Artists/Addartist';\r\nimport OtherPage1 from '../Artists/artist.component';\r\nimport OtherPage from '../Songs/song.component';\r\nimport Songs from '../Songs/AddSongs';\r\nimport {BrowserRouter as Router,Route} from \"react-router-dom\";\r\n\r\n\r\nclass Homepage extends React.Component{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={\r\n\r\n        }\r\n    }\r\n    render()\r\n    {\r\n        return (\r\n            <React.Fragment>\r\n              <Router>\r\n              <PrimarySearchAppBar/>\r\n              <OtherPage1/>\r\n              <OtherPage/>\r\n              </Router>\r\n            </React.Fragment>\r\n          );\r\n    }\r\n}\r\n \r\n\r\nexport default Homepage;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Homepage from './Components/Routes/Home';\nimport CreateTodo123 from './Components/Artists/Addartist';\nimport Songs from './Components/Songs/AddSongs';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport AddSongs from './Components/Songs/AddSongs';\nfunction App() {\n  return (\n    <React.Fragment>\n      <Router>\n        <Route path =\"/\" component={Homepage}/>\n        <Route path =\"/artist/addartist\" component={AddSongs}/>\n        // <Route path =\"/addsongs\" component={Songs} />\n        </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}